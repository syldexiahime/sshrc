#!/usr/bin/env bash
# Generates a minified .sshrc file
# Allows other local files to be sourced, by copying the contents of the sourced file and writing it into the minified file
function generate_minified_rcfile() {
    local temprc=$(sed -r "/(^\s*#(\s|\S)*$)/d" "$SSHHOME/.sshrc")
    IFS_OLD=$IFS
    IFS=$'\n'
    local sourcefiles=($(grep -oP "(?<=source )(\"(\s\S)+\"|\S+)" <<<"$temprc"))
    IFS=$IFS_OLD
    local minrc=""
    while IFS= read -r line; do
        local writeline="true"
        for f in ${sourcefiles[@]}; do
            if [[ $(grep "^\s*source $f" <<<"$line") != "" ]]; then
                local writeline="false"
                local file=$(envsubst <<< "${f/\~/'$HOME'}")
                local cont=$(sed -r "/(^\s*#(\s|\S)*$)/d" "$file")
                local minrc="$minrc"$'\n'"$cont"$'\n'
                local sourcefiles=("${sourcefiles[@]/$f}")
            fi
        done
        if [[ "$writeline" == "true" ]]; then
            minrc="${minrc}${line}"$'\n'
        fi
    done <<<"$temprc"
    minrc=$(sed -r -e "s/^\s+|\s+$//g" -e "/^$/d" <<<"$minrc")
    echo "$minrc" > "$SSHHOME/.sshrc.d/.sshrc.min"
}

function encode() {
    openssl enc -base64
}

function decode() {
    echo 'openssl enc -base64 -d'
}

function archive_files() {
    tar cfz - -h -C $SSHHOME $files
}

function unarchive_files() {
    echo 'tar mxzf - -C $SSHHOME'
}

function check_remote_dependencies() {
    echo "command -v openssl >/dev/null 2>&1 || { echo >&2 \"sshrc requires openssl to be installed on the server, but it's not. Aborting.\"; exit 1; }"
}

# Creates the welcome message
function show_welcome_message() {
    if [ -z "$CMDARG" -a ! -e ~/.sshrc.d/.hushlogin ]; then
        echo "
            if [ ! -e ~/.hushlogin ]; then
                if [ -e /etc/motd ]; then cat /etc/motd; fi
                if [ -e /etc/update-motd.d ]; then run-parts /etc/update-motd.d/ 2>/dev/null; fi
                last -F \$USER 2>/dev/null | grep -v 'still logged in' | head -n1 | awk '{print \"Last login:\",\$4,\$5,\$6,\$7,\$8,\"from\",\$3;}'
            fi
            "
    else
        echo ""
    fi
}

# Untars and unencodes
function include_files() {
    echo "
        export SSHHOME=\$(mktemp -d -t .$(whoami).sshrc.XXXX)
        export SSHRCCLEANUP=\$SSHHOME
        trap \"rm -rf \$SSHRCCLEANUP; exit\" 0
        echo $'"$(archive_files | encode)"' | tr -s ' ' $'\n' | $(decode) | $(unarchive_files)
        export SSHHOME=\$SSHHOME
    "
}

function include_sshrc_bin() {
    echo "
        echo $'"$(sed -r -e "s/^\s+|\s+$//g" -e "/^$/d" -e "/(^\s*#(\s|\S)*$)/d" "$0" | encode)"' | tr -s ' ' $'\n' | $(decode) > \$SSHHOME/sshrc
        chmod +x \$SSHHOME/sshrc
    "
}

function source_remote_rcfiles() {
    echo "
        echo $'"$( cat << 'EOF' | openssl enc -base64
if [ -r /etc/profile ]; then source /etc/profile; fi
if [ -r ~/.bash_profile ]; then source ~/.bash_profile
elif [ -r ~/.bash_login ]; then source ~/.bash_login
elif [ -r ~/.profile ]; then source ~/.profile
fi
export PATH=$PATH:$SSHHOME
source $SSHHOME/.sshrc.d/.sshrc.min;
EOF
        )"' | tr -s ' ' $'\n' | $(decode) > \$SSHHOME/sshrc.bashrc
        echo \"$CMDARG\" >> \$SSHHOME/sshrc.bashrc
        bash --rcfile \$SSHHOME/sshrc.bashrc
    "
}

# I genuinely have no idea what this was supposed to do.
# I removed it from the original script with seemingly no impact at all, but am keeping it
# temporarily until either I can figure out it's purpose or something breaks without it.
function do_something() {
    echo "
        echo $'"$( cat << 'EOF' | openssl enc -base64
#!/usr/bin/env bash
exec bash --rcfile <(echo '
[ -r /etc/profile ] && source /etc/profile
if [ -r ~/.bash_profile ]; then source ~/.bash_profile
elif [ -r ~/.bash_login ]; then source ~/.bash_login
elif [ -r ~/.profile ]; then source ~/.profile
fi
source '$SSHHOME'/.sshrc.d/.sshrc.min;
export PATH=$PATH:'$SSHHOME'
') "$@"
EOF
        )"' | tr -s ' ' $'\n' | openssl enc -base64 -d > \$SSHHOME/bashsshrc
        chmod +x \$SSHHOME/bashsshrc
    "
}

function build_sshrc_arg() {
    echo "
        $(check_remote_dependencies)
        $(show_welcome_message)
        $(include_files)
        $(include_sshrc_bin)
        $(source_remote_rcfiles)
    "
}

function sshrc() {
    local SSHHOME=${SSHHOME:=~}
    if [ -f $SSHHOME/.sshrc ]; then
        generate_minified_rcfile
        local files=".sshrc.d .sshrc.d/.sshrc.min"
        SIZE=$(archive_files | wc -c)
        if [ $SIZE -gt 65536 ]; then
            echo >&2 $'.sshrc.d and .sshrc files must be less than 64kb\ncurrent size: '$SIZE' bytes'
            exit 1
        fi
        ssh -t "$DOMAIN" $SSHARGS "$(build_sshrc_arg)"
    else
        echo "No such file: $SSHHOME/.sshrc" >&2
        exit 1
    fi
}

function sshrc_parse() {
  while [[ -n $1 ]]; do
    case $1 in
      -b | -c | -D | -E | -e | -F | -I | -i | -L | -l | -m | -O | -o | -p | -Q | -R | -S | -W | -w )
        SSHARGS="$SSHARGS $1 $2"; shift ;;
      -* )
        SSHARGS="$SSHARGS $1" ;;
      *)
        if [ -z "$DOMAIN" ]; then
         DOMAIN="$1"
        else
          local SEMICOLON=$([[ "$@" = *[![:space:]]* ]] && echo '; ')
          CMDARG="$@$SEMICOLON exit"
          return;
        fi
        ;;
    esac
    shift
  done
  if [ -z $DOMAIN ]; then
    ssh $SSHARGS; exit 1;
  fi
}
command -v openssl >/dev/null 2>&1 || { echo >&2 "sshrc requires openssl to be installed locally, but it's not. Aborting."; exit 1; }
sshrc_parse "$@"
sshrc

